(function(window, angular, undefined){
	var app = angular.module('taskmanager', ['ngResource', 'ui.sortable', 'ui.bootstrap', 'ui.router']);

	app.config(['$stateProvider', '$httpProvider', function($stateProvider, $httpProvider){
		$stateProvider.state('main', {
			templateUrl: 'main.html'
		}).state('auth', {
			templateUrl: 'auth.html',
			controller: 'authCtrl'
		});

		$httpProvider.interceptors.push(['$q', '$injector', function($q, $injector){
			return {
				responseError: function(response) {
					if (response.status === 401) {
						$injector.get('$state').go('auth');
					}

					return $q.reject(response);
				}
			};
		}]);

	}]).run(['$state', function($state){
		$state.go('main');
	}]);

	window.app = app;
})(window, window.angular);
(function(window, app, undefined){
	function authCtrl ($scope, userRsc, $state) {
		$scope.signUp = {
			data: {
				email: '',
				password: ''
			},
			action: function(form) {
				if (form.$invalid) {
					return;
				}

				var user = new userRsc($scope.signUp.data);
				user.$create().then(function(){
					$state.go('main');
				}).catch(function(err){
					console.warn(err);
				});
			}
		}

		$scope.signIn = {
			data: {
				email: '',
				password: ''
			},
			error: '',
			action: function(form) {
				if (form.$invalid) {
					return;
				}

				var user = new userRsc($scope.signIn.data);
				user.$login().then(function(){
					$state.go('main');
				}).catch(function(err){
					console.warn(err);
					$scope.signIn.error = err.data.error;
				});
			}
		}
	}

	app.controller('authCtrl', ['$scope' , 'userRsc', '$state', authCtrl]);
})(window, window.app);
(function(window, app, undefined){
	function mainCtrl ($scope, $state) {
		$scope.$state = $state;
	}

	app.controller('mainCtrl', ['$scope' , '$state', mainCtrl]);
})(window, window.app);
(function(window, app, undefined){
	function projectCtrl ($scope, projects, task, $timeout, $filter) {
		$scope.delete = function() {
			// remove
			$scope.project.$delete(function(){
				$scope.list.splice($scope.list.indexOf($scope.project), 1);
			});
		};

		$scope.tasks = projects.tasks({
			id: $scope.project.id
		});

		$scope.tasks.$promise.then(function(){
			for (var i in $scope.tasks) {
				$scope.tasks[i] = new task($scope.tasks[i]);
			}
		});

		$scope.newTask = {
			val: '',
			save: function() {
				if (!this.val.length) {
					return alert('Enter task text');
				}

				var newTask = new task({
					projectId: $scope.project.id,
					text: this.val
				});

				newTask.$save().then(function(){
					$scope.tasks.push(newTask);
					$scope.newTask.val = '';

					sortHandler();
				}).catch(function(err){
					console.warn(err);
				});
			}
		};

		$scope.deleteTask = function(task) {
			task.$delete(function(){
				$scope.tasks.splice($scope.tasks.indexOf(task), 1);
			});
		};

		var sortHandler = function() {
			$scope.project.tasksOrder = [];

			$scope.tasks.forEach(function(item){
				$scope.project.tasksOrder.push(item.id);
			});

			$scope.project.$sort();
		};

		$scope.sortOptions =  {
			handle: '.move',
			stop: sortHandler
		};

		(function(){
			var timeoutId;

			$scope.editProjectName = function() {
				if (timeoutId) {
					$timeout.cancel(timeoutId);
				}

				timeoutId = $timeout(function(){
					$scope.project.$save();
				}, 700);
			};
		})();

		(function(){
			var timeoutId;

			$scope.saveTask = function(task, deferred) {
				if (!deferred) {
					return task.$save();
				}

				if (timeoutId) {
					$timeout.cancel(timeoutId);
				}

				timeoutId = $timeout(function(){
					task.$save();
				}, 700);
			};
		})();
	}

	app.controller('projectCtrl', ['$scope', 'projects', 'task', '$timeout', '$filter', projectCtrl]);
})(window, window.app);
(function(window, app, undefined){
	function projectsCtrl ($scope, projects, userRsc, $state) {
		$scope.list = projects.query();

		$scope.createProject = function(){
			var newProject = new projects({
				name: 'New project'
			});

			newProject.$save().then(function(){
				$scope.list.push(newProject);
			}).catch(function(err){
				console.warn(err);
			});
		};

		$scope.signOut = function(){
			userRsc.logout().$promise.then(function(){
				$state.go('auth');
			});
		};
	}

	app.controller('projectsCtrl', ['$scope' ,'projects', 'userRsc', '$state', projectsCtrl]);
})(window, window.app);
(function(window, app, undefined){
	app.directive('compareTo', function() {
		return {
			require: "ngModel",
			scope: {
				otherModelValue: "=compareTo"
			},
			link: function(scope, element, attributes, ngModel) {

				ngModel.$validators.compareTo = function(modelValue) {
					return modelValue == scope.otherModelValue;
				};

				scope.$watch("otherModelValue", function() {
					ngModel.$validate();
				});
			}
		};
	});
})(window, window.app);
(function(window, app, undefined){
	app.directive('popOverEdit', ['$templateCache', '$compile', function($templateCache, $compile){
		return {
			restrict: 'A',
			scope: {
				data: '=popOverEdit',
				change: '&popOverChange'
			},
			link: function(scope, elem, attrs) {
				var win = angular.element(window);

				elem.on('click', function(event){
					event.stopPropagation();

					if (!event.target.getAttribute('pop-over-edit') || event.target.children.length > 0) {
						return;
					}

					var popover = $compile( $templateCache.get('popoveredit.html'))(scope);

					var close = function() {
						popover.remove();
						win.off('click', close);

						scope.$apply();
					};

					win.on('click', close);
					elem.append(popover);
					popover.find('input').on('input', scope.change);
					popover.find('input')[0].focus();

					scope.$apply();
				});
			}
		};
	}]);

	app.directive('popOverDatepicker', ['$templateCache', '$compile', '$filter', function($templateCache, $compile, $filter){
		return {
			restrict: 'A',
			scope: {
				initialDate: '=popOverDatepicker',
				change: '&popOverDatepickerChange'
			},
			link: function(scope, elem, attrs) {
				var win = angular.element(window);

				scope.date =  angular.copy(scope.initialDate);

				scope.date = new Date(scope.date);
				if (scope.date == "Invalid Date") {
					scope.date = null;
				}

				scope.minDate = new Date();

				elem.on('click', function(event){
					event.stopPropagation();

					if (event.target.getAttribute('pop-over-datepicker') === null || event.target.children.length > 0) {
						return;
					}

					var popover = $compile( $templateCache.get('datepicker.html'))(scope);

					var close = function() {
						popover.remove();
						win.off('click', close);

						scope.$apply();
					};

					win.on('click', close);
					elem.append(popover);

					scope.$apply();
				});

				scope.$watch('date', function(newVal, oldVal){
					if (newVal === oldVal) return;

					scope.initialDate = $filter('date')(scope.date, attrs.format);
					scope.change();
				});
			}
		};
	}]);
})(window, window.app);
(function(window, app, undefined){
	app.factory('projects', ['$resource', function($resource){
		return $resource(
			'/projects/:listCtrl:id/:docCtrl',
			{
				id: '@id',
				listCtrl: '@listCtrl',
				docCtrl: '@docCtrl'
			},
			{
				delete: {
					method: "DELETE",
					params: {
						docCtrl: 'delete'
					}
				},
				tasks: {
					method: "GET",
					isArray: true,
					params: {
						docCtrl: 'tasks'
					}
				},
				sort: {
					method: "POST",
					params: {
						docCtrl: 'sort'
					}
				}
			}
		);
	}]);
})(window, window.app);
(function(window, app, undefined){
	app.factory('task', ['$resource', function($resource){
		return $resource('/tasks/:id', {
			id: '@id'
		});
	}]);
})(window, window.app);
(function(window, app, undefined){
	app.factory('userRsc', ['$resource', function($resource){
		return $resource(
			'/user/:id/:action',
			{},
			{
				login: {
					method: "POST",
					params: {
						action: "signIn"
					}
				},
				logout: {
					method: "GET",
					params: {
						action: "signOut"
					}
				},
				create: {
					method: "POST",
					params: {
						action: "signUp"
					}
				}
			}
		);
	}]);
})(window, window.app);
angular.module('taskmanager').run(['$templateCache', function($templateCache) {
    $templateCache.put('auth.html',
        "<tabset class=\"auth\">\n\t<tab heading=\"Sign In\">\n\t\t<form novalidate name=\"signInForm\" ng-submit=\"signIn.action(signInForm)\" class=\"form-horizontal auth-form\">\n\t\t\t<div class=\"form-group\" ng-class=\"{ 'has-error' : !signInForm.email.$valid  && (signInForm.email.$dirty || signInForm.$submitted)}\">\n\t\t\t\t<label for=\"inputEmail3\" class=\"col-sm-2 control-label\">Email</label>\n\t\t\t\t<div class=\"col-sm-10\">\n\t\t\t\t\t<input type=\"email\" name=\"email\" required ng-model=\"signIn.data.email\"  class=\"form-control\" id=\"inputEmail3\" placeholder=\"Email\">\n\t\t\t\t\t<span class=\"error\" ng-show=\"signInForm.email.$error.email\">Enter valid email</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"form-group\" ng-class=\"{ 'has-error' : !signInForm.password.$valid  && (signInForm.password.$dirty || signInForm.$submitted)}\">\n\t\t\t\t<label for=\"inputPassword3\" class=\"col-sm-2 control-label\">Password</label>\n\t\t\t\t<div class=\"col-sm-10\">\n\t\t\t\t\t<input required  name=\"password\" ng-model=\"signIn.data.password\" type=\"password\" class=\"form-control\" id=\"inputPassword3\" placeholder=\"Password\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"form-group\">\n\t\t\t\t<div class=\"col-sm-offset-2 col-sm-10\">\n\t\t\t\t\t<button type=\"submit\" class=\"btn btn-info\">Sign In</button>\n\t\t\t\t\t<button type=\"reset\" class=\"btn btn-warning\">Reset</button>\n\t\t\t\t\t<span class=\"error\" ng-if=\"signIn.error\">{{ signIn.error }}</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</form>\n\t</tab>\n\n\t<tab heading=\"Sign Up\">\n\t\t<form name=\"signUpForm\" novalidate class=\"form-horizontal auth-form\" ng-submit=\"signUp.action(signUpForm)\">\n\t\t\t<div class=\"form-group\" ng-class=\"{ 'has-error' : !signUpForm.email.$valid  && (signUpForm.email.$dirty || signUpForm.$submitted)}\">\n\t\t\t\t<label for=\"inputEmail3\" class=\"col-sm-2 control-label\">Email</label>\n\t\t\t\t<div class=\"col-sm-10\">\n\t\t\t\t\t<input required ng-model=\"signUp.data.email\" type=\"email\" name=\"email\" class=\"form-control\" id=\"inputEmail3\" placeholder=\"Email\">\n\t\t\t\t\t<span class=\"error\" ng-show=\"signUpForm.email.$error.email\">Enter valid email</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"form-group\" ng-class=\"{ 'has-error' : !signUpForm.password.$valid  && (signUpForm.password.$dirty || signUpForm.$submitted)}\">\n\t\t\t\t<label for=\"inputPassword3\" class=\"col-sm-2 control-label\">Password</label>\n\t\t\t\t<div class=\"col-sm-10\">\n\t\t\t\t\t<input ng-minlength=\"6\" ng-maxlength=\"20\" required ng-model=\"signUp.data.password\" type=\"password\" name=\"password\" class=\"form-control\" id=\"inputPassword3\" placeholder=\"Password\">\n\t\t\t\t\t<span class=\"error\" ng-show=\"signUpForm.password.$error.minlength\">Min length is 6</span>\n\t\t\t\t\t<span class=\"error\" ng-show=\"signUpForm.password.$error.maxlength\">Max length is 20</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"form-group\" ng-class=\"{ 'has-error' : !signUpForm.confirmPassword.$valid  && (signUpForm.confirmPassword.$dirty || signUpForm.$submitted)}\">\n\t\t\t\t<label for=\"inputPassword4\" class=\"col-sm-2 control-label\">Confirm password</label>\n\t\t\t\t<div class=\"col-sm-10\">\n\t\t\t\t\t<input compare-to=\"signUp.data.password\" ng-model=\"confirmPassword\" required type=\"password\" name=\"confirmPassword\" class=\"form-control\" id=\"inputPassword4\" placeholder=\"Confirm password\">\n\n\t\t\t\t\t<span class=\"error\" ng-show=\"signUpForm.confirmPassword.$error.compareTo && signUpForm.confirmPassword.$dirty\">Passwords doesnt match </span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"form-group\">\n\t\t\t\t<div class=\"col-sm-offset-2 col-sm-10\">\n\t\t\t\t\t<button type=\"submit\" class=\"btn btn-info\">Sign Up</button>\n\t\t\t\t\t<button type=\"reset\" class=\"btn btn-warning\">Reset</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</form>\n\t</tab>\n</tabset>");
}]);
angular.module('taskmanager').run(['$templateCache', function($templateCache) {
    $templateCache.put('datepicker.html',
        "<div class=\"popover top calendar\">\n\t<div class=\"arrow\"></div>\n\n\t<div class=\"popover-inner\">\n\t\t<div name=\"popoverEditForm\" class=\"popover-content form-inline\">\n\t\t\t<h4>Deadline</h4>\n\t\t\t<div>\n\t\t\t\t<datepicker ng-model=\"date\" min-date=\"minDate\" show-weeks=\"true\" class=\"well well-sm\"></datepicker>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>");
}]);
angular.module('taskmanager').run(['$templateCache', function($templateCache) {
    $templateCache.put('main.html',
        "<div class=\"projects\" ng-controller=\"projectsCtrl\">\n\t<section ng-repeat=\"project in list\" ng-controller=\"projectCtrl\" ng-include=\"'project.html'\"></section>\n\n\t<div class=\"create-project\">\n\t\t<a href ng-click=\"createProject()\" class=\"btn btn-primary\">Add Project</a>\n\t\t<a href ng-click=\"signOut()\" class=\"btn btn-default\">Log out</a>\n\t</div>\n</div>");
}]);
angular.module('taskmanager').run(['$templateCache', function($templateCache) {
    $templateCache.put('popoveredit.html',
        "<div class=\"popover top edit-popover\">\n\t<div class=\"arrow\"></div>\n\n\t<div class=\"popover-inner\">\n\t\t<form name=\"popoverEditForm\" class=\"popover-content form-inline\">\n\t\t\t<div class=\"form-group\" ng-class=\"{ 'has-error' :  popoverEditForm.data.$invalid }\">\n\t\t\t\t<input type=\"text\" ng-model=\"data\" required name=\"data\" class=\"form-control\"/>\n\t\t\t\t<div ng-show=\"popoverEditForm.data.$error.required\" class=\"error text-center\">Name is required</div>\n\t\t\t</div>\n\t\t</form>\n\t</div>\n</div>");
}]);
angular.module('taskmanager').run(['$templateCache', function($templateCache) {
    $templateCache.put('project.html',
        "<div class=\"head\">\n\t<div class=\"title\">\n\t\t<span class=\"text\">\n\t\t\t<span class=\"glyphicon glyphicon-calendar icon\"></span> {{ project.name }}\n\t\t</span>\n\n\t\t<div class=\"controls\">\n\t\t\t<a href class=\"edit glyphicon glyphicon-pencil\" pop-over-edit=\"project.name\" pop-over-change=\"editProjectName()\"></a>\n\t\t\t<a href class=\"remove glyphicon glyphicon-trash\" ng-click=\"delete()\"></a>\n\t\t</div>\n\t</div>\n</div>\n\n<div class=\"create-task\">\n\t<span class=\"icon glyphicon glyphicon-plus\"></span>\n\t<div class=\"input-wrap\">\n\t\t<input placeholder=\"Start typing here to create task...\" type=\"text\" ng-model=\"newTask.val\" />\n\t\t<a class=\"add\" ng-click=\"newTask.save()\" href>Add task</a>\n\t</div>\n</div>\n\n<ul class=\"tasks\" ui-sortable=\"sortOptions\" ng-model=\"tasks\">\n\t<li ng-repeat=\"task in tasks\" class=\"clearfix\">\n\t\t<div class=\"status\">\n\t\t\t<input type=\"checkbox\" ng-change=\"saveTask(task)\" ng-model=\"task.complete\" ng-true-value=\"1\" ng-false-value=\"0\" />\n\t\t</div>\n\t\t<div class=\"text\" ng-class=\"{ cross : task.complete }\">{{ task.text }}</div>\n\t\t<div class=\"control text-center\">\n\t\t\t<span class=\"move glyphicon glyphicon-menu-hamburger\"></span>\n\t\t\t<span class=\"glyphicon glyphicon-calendar icon\" pop-over-datepicker=\"task.deadline\" pop-over-datepicker-change=\"saveTask(task, true)\" format=\"yyyy-MM-dd\"></span>\n\t\t\t<span class=\"glyphicon glyphicon-pencil\" pop-over-edit=\"task.text\" pop-over-change=\"saveTask(task, true)\"></span>\n\t\t\t<span class=\"glyphicon glyphicon-trash\" ng-click=\"deleteTask(task)\"></span>\n\t\t</div>\n\t</li>\n</ul>");
}]);